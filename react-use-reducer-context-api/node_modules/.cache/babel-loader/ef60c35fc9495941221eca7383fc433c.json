{"ast":null,"code":"var _jsxFileName = \"/Users/jeongin/Desktop/React-Study/react-use-reducer-context-api/src/App.js\";\nimport React, { useState, useEffect } from 'react';\nimport Login from './components/Login/Login';\nimport Home from './components/Home/Home';\nimport MainHeader from './components/MainHeader/MainHeader';\nimport AuthContext from './store/auth-context';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  // const [isLoggedIn, setIsLoggedIn] = useState(false);\n  // // 의존성이 변동된 경우에만 실행 된다.\n  // // dependency mutation\n  // useEffect(() =>{\n  //   const storedUserLoggedInInformation = localStorage.getItem('isLoggedIn');\n  //   if(storedUserLoggedInInformation === '1 '){\n  //     setIsLoggedIn(true);\n  //   }\n  // },[]);\n  // const loginHandler = (email, password) => {\n  //   // We should of course check email and password\n  //   // But it's just a dummy/ demo anyways\n  //   localStorage.setItem('isLoggedIn', '1');\n  //   setIsLoggedIn(true);\n  // };\n  // const logoutHandler = () => {\n  //   localStorage.removeItem('isLoggedIn');\n  //   setIsLoggedIn(false);\n  // };\n  return (\n    /*#__PURE__*/\n    //Context에 변수 할당\n    // <AuthContext.Provider \n    //   value={{\n    //     isLoggedIn: isLoggedIn,\n    //     onLogout: logoutHandler\n    //   }}\n    // >\n    // <>\n    // <MainHeader isAuthenticated={isLoggedIn} onLogout={logoutHandler} />\n    //   <main>\n    //     {!isLoggedIn && <Login onLogin={loginHandler} />}\n    //     {isLoggedIn && <Home onLogout={logoutHandler} />}\n    //   </main>\n    // </>\n    // </AuthContext.Provider>\n    _jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(MainHeader, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n        children: [!isLoggedIn && /*#__PURE__*/_jsxDEV(Login, {\n          onLogin: loginHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 27\n        }, this), isLoggedIn && /*#__PURE__*/_jsxDEV(Home, {\n          onLogout: logoutHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 26\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true)\n  );\n}\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","Login","Home","MainHeader","AuthContext","App","isLoggedIn","loginHandler","logoutHandler"],"sources":["/Users/jeongin/Desktop/React-Study/react-use-reducer-context-api/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\n\nimport Login from './components/Login/Login';\nimport Home from './components/Home/Home';\nimport MainHeader from './components/MainHeader/MainHeader';\nimport AuthContext from './store/auth-context';\n\nfunction App() {\n  // const [isLoggedIn, setIsLoggedIn] = useState(false);\n  \n  // // 의존성이 변동된 경우에만 실행 된다.\n  // // dependency mutation\n  // useEffect(() =>{\n  //   const storedUserLoggedInInformation = localStorage.getItem('isLoggedIn');\n\n  //   if(storedUserLoggedInInformation === '1 '){\n  //     setIsLoggedIn(true);\n  //   }\n  // },[]);\n\n  // const loginHandler = (email, password) => {\n  //   // We should of course check email and password\n  //   // But it's just a dummy/ demo anyways\n  //   localStorage.setItem('isLoggedIn', '1');\n  //   setIsLoggedIn(true);\n  // };\n\n  // const logoutHandler = () => {\n  //   localStorage.removeItem('isLoggedIn');\n  //   setIsLoggedIn(false);\n  // };\n\n  return (\n    //Context에 변수 할당\n      // <AuthContext.Provider \n      //   value={{\n      //     isLoggedIn: isLoggedIn,\n      //     onLogout: logoutHandler\n      //   }}\n      // >\n      // <>\n      // <MainHeader isAuthenticated={isLoggedIn} onLogout={logoutHandler} />\n      //   <main>\n      //     {!isLoggedIn && <Login onLogin={loginHandler} />}\n      //     {isLoggedIn && <Home onLogout={logoutHandler} />}\n      //   </main>\n      // </>\n      // </AuthContext.Provider>\n\n      <>\n      <MainHeader />\n        <main>\n          {!isLoggedIn && <Login onLogin={loginHandler} />}\n          {isLoggedIn && <Home onLogout={logoutHandler} />}\n        </main>\n      </>\n  );\n}\n\nexport default App;\n"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AAEA,OAAOC,KAAP,MAAkB,0BAAlB;AACA,OAAOC,IAAP,MAAiB,wBAAjB;AACA,OAAOC,UAAP,MAAuB,oCAAvB;AACA,OAAOC,WAAP,MAAwB,sBAAxB;;;;AAEA,SAASC,GAAT,GAAe;EACb;EAEA;EACA;EACA;EACA;EAEA;EACA;EACA;EACA;EAEA;EACA;EACA;EACA;EACA;EACA;EAEA;EACA;EACA;EACA;EAEA;IAAA;IACE;IACE;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IAEA;MAAA,wBACA,QAAC,UAAD;QAAA;QAAA;QAAA;MAAA,QADA,eAEE;QAAA,WACG,CAACC,UAAD,iBAAe,QAAC,KAAD;UAAO,OAAO,EAAEC;QAAhB;UAAA;UAAA;UAAA;QAAA,QADlB,EAEGD,UAAU,iBAAI,QAAC,IAAD;UAAM,QAAQ,EAAEE;QAAhB;UAAA;UAAA;UAAA;QAAA,QAFjB;MAAA;QAAA;QAAA;QAAA;MAAA,QAFF;IAAA;EAjBJ;AAyBD;;KAlDQH,G;AAoDT,eAAeA,GAAf"},"metadata":{},"sourceType":"module"}